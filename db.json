[{"keywords":"Dennis Mai, Blog, Fatherhood","title":"Dennis Mai - Being a Present and Mindful Father","description":"Being present and mindful as a father -- being your best self so that your child/children can be their best selves","extension":".md","updatedAt":1607078582227,"toc":[{"id":"being-a-present-father","depth":1,"text":"Being a Present Father"}],"body":"<h1 id=\"being-a-present-father\">Being a Present Father</h1>\n<p>I love my job. I love programming and web development. I could spend all day learning, experimenting, and building things.</p>\n<p>And sometimes, that's not okay.</p>\n<p>The internet, full of documentation, articles, and awesome work, is never more a few finger swipes away. Because my work mostly happens in my head, it's easy for me to keep working when I'm not in front of the computer.</p>\n<p>Even when I'm with my family.</p>\n<p>I have to make continuous and conscious effort to put aside my plans, ideas, and thoughts--personal or professional--in order to be <em>fully present</em> with my family, so they can have the attention that they deserve, so they can be the best versions of themselves with me witnessing.</p>\n<p>Why else be a father? Why else be a husband?</p>\n<p>There's a time for me to be a developer. And then there's a time for me to be a husband and father.</p>\n<p>My time with my family--our time <em>together</em>--is more important than my time making things or expressing myself. Yes, I can always make time for that, especially when I need to, but I know what's most important to me.</p>\n<p>My parents were always physically present, more or less, but they worked constantly. My mother owned her own businesses and my father, when he wasn't earning money, was constantly fixing, maintaining, or building something in the garage or yard. Eventually, when I was old and strong enough, I would do the same thing with him, and that's how we bonded. But that wasn't until I was much older.</p>\n<p>That's not to say my parents weren't there when I needed them. They were just occupied, busy taking care of our lives. Busy building a future for me. They were and ARE the best parents, and I love them immensely.</p>\n<p>And I want to be that for my children. One day, maybe we can do projects together. But when we're together, we're together in the same place and time. And I'm not somewhere else.</p>"},{"keywords":"Dennis Mai, Weird Wide Web, Brazilian Jiu Jitsu, BJJ, Choke Holds, BJJ Strangulations","title":"My Favorite BJJ Chokes","description":"An oddly specific list of Dennis Mai's favoriate Brazilian Jiu jitsu chokes and strangulations.","extension":".md","updatedAt":1606690800000,"toc":[{"id":"jiu-jitsu-chokes-and-strangulations---my-favorite-ways-to-safely-submit-someone","depth":1,"text":"Jiu Jitsu Chokes and Strangulations - My Favorite Ways to Safely Submit Someone"},{"id":"summary","depth":2,"text":"Summary"}],"body":"<h1 id=\"jiu-jitsu-chokes-and-strangulations---my-favorite-ways-to-safely-submit-someone\">Jiu Jitsu Chokes and Strangulations - My Favorite Ways to Safely Submit Someone</h1>\n<p>This may sound weird (or it won't, if you're familiar with Jiu Jitsu), but I have a very specific list of favorite chokes for Jiu Jitsu.</p>\n<p>In order, they have GOT to be:</p>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=fuvgllnmp3g\">The Ezekiel Choke</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=9Y6MmSR6LjU\">The Loop Choke</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=l8-JI7NND3E\">The Rear Naked Choke</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=yrUXIujVGTM\">The Bow-and-Arrow Choke</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=A4LQMLYJ9yo\">The Anaconda</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=0Dx5Ecj2yV4\">The D'arce</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=VkI7wuhN2Ps\">The North-South Choke</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=kxCCrUACAwM\">The Peruvian Necktie</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=raUOzIkDt5k\">The Arm-in Guillotine</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=2uAzRUGtnkA\">THE MOTHER'S MILK</a></li>\n</ol>\n<p><em>BONUS</em> <a href=\"https://www.youtube.com/watch?v=waM29uvV1Wo\">The Triangle Choke.</a> (This should be #1, but it's such a staple. C'mon!)</p>\n<p>I'll let the experts explain the details. Needless to say, there are countless resources for perfecting each technique, and you won't find them on youtube.</p>\n<p><strong>PRACTICE WITH SAFETY. I AM NOT LIABLE FOR ANY INJURY CAUSED. I CAN'T BELIEVE I HAVE TO SAY THAT</strong></p>\n<h2 id=\"summary\">Summary</h2>\n<p>If you haven't yet, go start Brazilian Jiu Jitsu. It isn't for everyone, but if you're comfortable in uncomfortable situations, enjoy being rowdy, and like bonding with people by simulating murder in pajamas, then it's for you. The choking isn't bad either.</p>"},{"keywords":"ejs, webpack, blog, markdown, simple blog, Vanilla JS, GSAP, Lean Web, JAM Stack","title":"Dennis Mai - How I Made My Blog","description":"How I made my blog using just ejs, webpack, scss, and vanilla JS. (And GSAP for animations. It's unnecessary -- but fun)","extension":".md","updatedAt":1605826800000,"toc":[{"id":"how-i-made-this-blog","depth":1,"text":"How I Made This Blog"},{"id":"the-tech","depth":2,"text":"The Tech"},{"id":"ejs","depth":3,"text":"EJS"},{"id":"i-am-using-webpack-version-4","depth":3,"text":"I am using Webpack version 4"},{"id":"sass-scss","depth":3,"text":"SASS (scss)"},{"id":"vanilla-javascript","depth":3,"text":"Vanilla Javascript"},{"id":"gsap","depth":3,"text":"GSAP"},{"id":"project-setup","depth":3,"text":"Project Setup"},{"id":"multi-page-sites-with-webpack","depth":4,"text":"Multi-page sites with Webpack"},{"id":"transform-markdown-to-ejs-and-then-to-plain-html","depth":4,"text":"Transform Markdown to EJS and then to plain HTML"},{"id":"updating-posts-and-preventing-full-rewrites","depth":4,"text":"Updating Posts and Preventing Full Rewrites"},{"id":"dynamic-entry-object-for-webpack","depth":4,"text":"Dynamic entry object for Webpack"},{"id":"the-html-files","depth":4,"text":"The HTML files"},{"id":"caveat","depth":4,"text":"Caveat"},{"id":"summary","depth":2,"text":"Summary"}],"body":"<h1 id=\"how-i-made-this-blog\">How I Made This Blog</h1>\n<p>First, this is a custom solution that's probably only applicable for small blogs (less than a few hundred posts). Anything more will take a long time to build, for reasons I will explain below.</p>\n<p>Second, This blog was built just for fun. While webpack supports building multiple pages with multiple entry points, it was probably never intended for full-blown blog building. There are other tools better suited for the job, like Next.js, Huge, Jekyll, Eleventy, and the like.</p>\n<p>That said, if you want to do something similar just for fun, read on!</p>\n<h2 id=\"the-tech\">The Tech</h2>\n<p>I tried to make a blog using the SIMPLEST technlogies available, with as few tools as possible while still allowing for website optimizations.</p>\n<ul>\n<li><a href=\"https://ejs.co/\">EJS</a> templates to reuse components.</li>\n<li><a href=\"https://webpack.js.org/\">Webpack v4</a> for the dev server, building, and optimizations.</li>\n<li><a href=\"https://sass-lang.com/documentation/syntax\">SASS</a> for reusing CSS.</li>\n<li><a href=\"https://vanillajstoolkit.com/\">Vanilla JS</a>, because I don't like dependencies. Webpack is terrible enough.</li>\n<li><a href=\"https://greensock.com/docs/\">GSAP</a> For animations. This website is actually my first time using GSAP.</li>\n</ul>\n<h3 id=\"ejs\">EJS</h3>\n<p>Why? Because I'm already very familiar with the syntax. And when building projects that you expect to last a while, it's probably best to use an 80/20 stack mix of tech you know well with new tech you want to learn, which is why...</p>\n<h3 id=\"i-am-using-webpack-version-4\">I am using Webpack version 4</h3>\n<p>Webpack 5 just came out, and its release is a hot debate, because, well, it's like they didn't even try to see what would and wouldn't break. I know and love (and kind of hate) Webpack 4, so I'm stickin' with the old guns for now. Also, it's in plain Javascript, so even when I have to learn something new--like making a blog--it's not too much of a stretch figuring things out.</p>\n<h3 id=\"sass-scss\">SASS (scss)</h3>\n<p>I love it. It's actually mostly unnecessary with the power of the current CSS3 api, but, again, I know it well and I enjoy it.</p>\n<h3 id=\"vanilla-javascript\">Vanilla Javascript</h3>\n<p>This was a no-brainer. At the time of this writing, I'm only familiar with React. I'm no expert, but I'm certainly no novice at this point. I would love to learn Vue, Svelte, Preact, and even Angular, but I also want this site to be as fast as possible and rely on as few dependencies as possible. And that's not a realistic expection when using those Javascript libraries or frameworks. Vanilla Javascript is good. It's performant, and you really don't need more.</p>\n<h3 id=\"gsap\">GSAP</h3>\n<p>Okay, GSAP is my 20%. I had never worked with GSAP before and had only heard good things. So I'm giving it a shot, and so far, it's wonderful. Very fun, very intuitive, and VERY powerful. Highly recommended.</p>\n<h3 id=\"project-setup\">Project Setup</h3>\n<pre><code>root    |- configs...\n        |- src  |- components\n                |- fonts\n                |- images\n                |- pages\n                |- posts\n                |- scripts\n                |- styles\n                |- views\n</code></pre>\n<p>I have all the code in the root/src folder with configs for postcss and webpack under the root directory. I use separate webpack configs for dev and production and use webpack-merge to merge them with common configurations.</p>\n<p>I am also hosting on Netlify, which is its own topic.</p>\n<p>In my src folder, I have directories hosting my assets.</p>\n<p>I have styles in its own folder, but you can host them any way you like, including next to their pages (or their views or their components or wherever. It doesn't matter).</p>\n<p>Of particular importance are my pages, posts, and views folders.</p>\n<h4 id=\"multi-page-sites-with-webpack\">Multi-page sites with Webpack</h4>\n<p>My Webpack entry points are pointing the pages directory. Each file there there is its own entrypoint, except for blog posts. There is 1 entrypoint for each post (in the posts directory), which all use the same styles and javscript. This is not ideal, but I couldn't get webpack to reuse my entrypoints with the splutChunks options. I might try it again later, but it was extremely frustrating.</p>\n<h4 id=\"transform-markdown-to-ejs-and-then-to-plain-html\">Transform Markdown to EJS and then to plain HTML</h4>\n<p>I am using <a href=\"https://github.com/cenguidanos/node-markdown-parser\">@cenguidanos/node-markdown-parser</a> to return an array of all my posts with their meta content such as title, description and keywords in a json object. To do that, I make use of <code>fs.readdirSync</code> and <code>fs.readFileSync</code> to grab the all the posts and their data.</p>\n<p>With that data, I construct an ejs template that reuses header and footer components. I then write the template to a corresponding ejs file in the views directory using <code>fs.writeFile</code>.</p>\n<h4 id=\"updating-posts-and-preventing-full-rewrites\">Updating Posts and Preventing Full Rewrites</h4>\n<p>The tools provided don't provide a simple way of checking if the date being written or read is new or old. In particular the markdown parser will simply create the file with a new updatedAt date, which can be problematic when you didn't update the post.</p>\n<p>The way I dealt with this problem is actually be keeping the list of blog data in a simple database file called db.json, to which I compare the new blog data. We construct a new array of the blog data using old, unchanged entries with new and updated entries and write that to the 'database'. This way, the keep the meta data -- especially the updatedAt date -- in tact.</p>\n<h4 id=\"dynamic-entry-object-for-webpack\">Dynamic entry object for Webpack</h4>\n<p>Before I create any html files, though, I have to create my entry points for Webpack. Using the pages directory, I construct an object with the name of the page file and its path. For posts, I begin with the name 'posts1', since I will need to create 1 entry for each blog post (ugh. Annoying. And VERY non-performant).</p>\n<h4 id=\"the-html-files\">The HTML files</h4>\n<p>Now, in order to create all those html files with their css and js files embedded, I get all the ejs files from the views directory and use the <a href=\"https://www.npmjs.com/package/glob\">glob</a> package to get their paths. It's also possible with the fs module, but glob is easier.</p>\n<p>I then use <code>Array.reduce()</code> to construct a new array of HtmlWebpackPlugin instances of ALL the ejs files, injecting their meta data and associating the appropriate chunk (css and js file) with their names. if they are posts, I have to handle them slightly differently.</p>\n<p>Here, I also check if the ejs file is associated with a post that was deleted (no longer in the posts directory). If it's not there, posts is undefined, so I use <code>fs.unlink</code> to delete it from the views.</p>\n<p>In the Webpack Plugins array, I concat the HtmlWebpackPlugins array with MiniCssExtractPlugin, Critters to inline the css, and CleanWebpackPlugin.</p>\n<p>The rest is of my webpack config is just configuring scss, ejs, injecting my fonts and images, and setting node rules for different modules.</p>\n<p>And there you have it!</p>\n<h4 id=\"caveat\">Caveat</h4>\n<p>With ejs templates in webpack, the dev server will <em>not</em> reload the browser if there are nested ejs templates. That's annoying when we are reusing components defined in .ejs files.</p>\n<p>The dev server only checks if the entrypoint files or their indexes (the root ejs pages) have changed, not their nested templates.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>This was a lot of setup for a small blog. But it's pretty lightweight, and a lot easier to set up than a full-blown blog CRUD app.</p>\n<p>That set, it's probably easier to use Huge, Jekyll, or Eleventy. I'll experiment with those later.</p>"},{"keywords":"Dennis Mai, Blog, Development, Weird Wide Web, Node, Webpack, EJS, Vanilla JS, Lean Web, JAMstack","title":"Dennis Mai - Introduction to My Blog","description":"A short introduction to Dennis Mai's blog and website.","extension":".md","updatedAt":1605049200000,"toc":[{"id":"introduction-to-this-website-and-blog","depth":1,"text":"Introduction to this Website and Blog"},{"id":"my-promise-to-you","depth":2,"text":"My Promise to You"}],"body":"<h1 id=\"introduction-to-this-website-and-blog\">Introduction to this Website and Blog</h1>\n<p>Greetings web <a href=\"#note1\">surfer*</a> and welcome back to the weird web!</p>\n<p>This website is a work of <em>self expression</em>. Here I lay to bare my thoughts, ideas, my learning and doubt.</p>\n<p>It's also a homage to the primordial <a href=\"https://indieweb.org/\">indie web</a> that makes the internet such a fascinating place. </p>\n<p>This website is also my own custom blog. It is far from perfect, but it's mine. I write about Technology, Society &#x26; Culture, Brazilian Jiu Jitsu, Fatherhood, being a husband (Husband...hood?), and lots of other things.</p>\n<h2 id=\"my-promise-to-you\">My Promise to You</h2>\n<p>This place is a work in progress. Right now, it's not 100% accessible, but I will continue to make it as accessible to as many people as I can.</p>\n<p>That said, you can always send me feedback via email.</p>\n<p>Enjoy the tour, and and I hope you'll be inspired to make the web a little bit better. And a little bit weirder.</p>\n<p><a href=\"#introduction-to-this-website-and-blog\">Back to the top</a></p>\n<p><em><a name=\"note1\"></a> * When the internet was first becoming popular, it was called the \"World Wide Web\", and those browsing the internet then were \"surfing the web.\" Good times.</em></p>"},{"keywords":"Dennis Mai, Blog, Development, Weird Wide Web, Leetcode, Side Projects, Motivation, Burnout, Hobbies","title":"Dennis Mai - How I Stay Sharp, Focused, and Motivated","description":"A short introduction to Dennis Mai's blog and website.","extension":".md","updatedAt":1609005949224,"toc":[{"id":"how-i-stay-sharp-and-motivated-to-keep-learning","depth":1,"text":"How I Stay Sharp and Motivated to Keep Learning"},{"id":"embracing-the-grind","depth":2,"text":"Embracing the grind"},{"id":"learning-how-to-learn----my-personal-methods","depth":2,"text":"Learning how to learn -- my personal methods"},{"id":"switching-context","depth":2,"text":"Switching context"},{"id":"learning-how-to-learn","depth":2,"text":"Learning how to learn"},{"id":"taking-care-of-myself","depth":2,"text":"Taking care of myself"},{"id":"summary","depth":3,"text":"Summary"}],"body":"<h1 id=\"how-i-stay-sharp-and-motivated-to-keep-learning\">How I Stay Sharp and Motivated to Keep Learning</h1>\n<p>It's no secret that in the world of programming, and especially in the Web Development domain, it is both challenging to get started and to stay current with technology. Leetcode grinding, Personal Projects, Side Projects, Experience, Portfolios, Internships. It's all par for the course. That doesn't include whatever personal tribulations each of us encounters -- financial, familial, emotional.</p>\n<p>Even after that first job, it can still be overwhelming to keep up with the trends in technology, new (old) best practices, old and legacy technology, and relevant blog posts and package updates. (This post doesn't count. I'm writing more for myself than for you. Sorry, dear reader).</p>\n<p>Sure, you do just fine if you're not learning new technologies, depending on your niche. But it eventually catches up, unless you change careers completely. Most of us need to learn to stay competative and relevant. Anyway, most of us want to, because part of the draw of programming comes from the learning, the tinkering, the problem-solving and creative processes.</p>\n<h2 id=\"embracing-the-grind\">Embracing the grind</h2>\n<p>Even more disheartening, there's too much for any one person to know. We have to choose wisely what we want to invest our time and energy learning, because it's a rare individual that can effectively learn and apply 15 programming languages, methodologies and best practices, library interfaces and apis, <em>and</em> soft skills to be a 10x developer.</p>\n<p>Let's face it, more than half of us don't stray far from average. That's statistics. And that's okay. So how do we best utilize our average resources to optimize our programming performance?</p>\n<p>By being strategic and calculated about what we learn, when we learn it, and how we retain that knowledge.</p>\n<h2 id=\"learning-how-to-learn----my-personal-methods\">Learning how to learn -- my personal methods</h2>\n<p>I can't speak for everybody, but I learn best by following these steps:</p>\n<ol>\n<li>Figuring out what I want to do, whether it be learning a new technology, addressing a specific, personal or professional need, or just fixing a bug.</li>\n<li>Learning what others have done to solve this specific problem, if it's been solved before. When there are multiple solutions, find one that suits my needs the best.</li>\n<li>Applying whatever solution I find through IMPLEMENTING IT in my own code</li>\n<li>Reading documentation, blogs, and other code to better implement the solution</li>\n<li>Taking notes, breaks, and returning to the code later</li>\n<li>Repeat steps 3 to 5</li>\n</ol>\n<p>For me, it's really too academic to just read and take notes. I have to practice, implement, act. Knowledge sinks in best when applied. Taking notes is also useful, but, again, without practice, it's just in-and-out, theoretical knowledge -- impractical.</p>\n<p>This method applies both to my professional and personal projects. It's how I keep up with old and new tech and best practices. When best practices, libraries, or APIs change, I refactor. That's also an amazing time to learn, especially from myself. It's how I benchmark my own progress as well, whether or not I can read my own code later, judging its readability, organization, efficiency, and efficacy.</p>\n<h2 id=\"switching-context\">Switching context</h2>\n<p>But it's not just projects I dip my brain toes in. I'm constantly reading books and articles. I read when I'm awake and my brain is active, and when I tire, I take a break or do something completely different, such as go on a walk, do some exercises, go to Jiu Jitsu practice.</p>\n<p>When I'm bored of working on a project, I leetcode. And when that's boring, I work on a project, or read.</p>\n<p>My brain needs constant stimulation, but not always the same kind. That's why it's good for me to switch context. I'm almost always learning, and never vegging out, but what I'm learning and how is constantly varying. I can only work my attention span so long to be effective. But switching context is like a breath of fresh air.</p>\n<h2 id=\"learning-how-to-learn\">Learning how to learn</h2>\n<p>There are a lot of resources on this topic, but suffice it to say that this meta-skill is the most important skill to have. Period. This is the (post) Information age, where industries and fields are born and die within a generation and workers change careers multiple times, often within the same decade.</p>\n<p>You have to be flexible, emotionally, mentally, physically. It means moving. It means learning. It means being resilient. It's the new normal, and if you can't, you have to at least be taking care of yourself.</p>\n<h2 id=\"taking-care-of-myself\">Taking care of myself</h2>\n<p>I also notice an enormous different when I eat, sleep, and exercise correctly. It's too easy for me to get lost in code, reading, and knowledge. </p>\n<p>I can easily stay up late at night coding. But the different in the morning is especially stark. My toddler wakes up between 5 and 6:30 no matter what. Sometimes she she has nightmares. I can't plan for that. I can control when I go to bed, and I know I need at least 8 hours to function above 90% during the day. Coffee doesn't cut it.</p>\n<p>I also doesn't sleep well when I eat and drink poorly. Alcohol, especially, destroys the quality of my sleep, and junk food fogs my brain and attention. Lots of fatty, sugary food will do that. Eating lots of veggies, fruit and protein, with a healthy -- but not overly abundant -- dose of complex carbs keeps my mood steady throughout the day and my sleep extra nice.</p>\n<p>And the best sleep happens when I eat and drink well and go to bed at 22:00 after having done at least 30 minutes of exercise in the day. Even if it means a 30 minute walk. Without that, my brain might be tired, but my body isn't, and I have trouble falling and staying asleep.</p>\n<h3 id=\"summary\">Summary</h3>\n<p>A career in programming is a long-distance sprint. No, that's not an oxymoron. There are times when the pressure to meet a deadline is overwhelming, so we're sprinting to implement a solution. When that's not the case, we're simply learning something new, mixing our creative juices with our critical thinking and problem-solving.</p>\n<p>Mental and emotional stamina, resilience, flexibility, and raw power are necessary to thrive in such an environment. So we have to take care of ourselves and utilize our resources to the best of our personal abilities.</p>\n<p>Sorry if that was long-winded.</p>"}]